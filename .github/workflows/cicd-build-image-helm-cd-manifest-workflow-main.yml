# This is a basic workflow to help you get started with Actions

name: CI and CD with Helm charts

on: 
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables available to all jobs and steps in this workflow
env:

  CLUSTER_NAME: foodforlife-aks
  CLUSTER_RESOURCE_GROUP: foodforlife-rg
  NAMESPACE: foodforlife-aks-dev
  SECRET: foodforlife-secret
  ACR_SERVER_NAME : foodforlifeacr.azurecr.io
  APP_NAME: foodforlife-producer-api
  TAG: 0.0.2-snapshot
  HELM_EXPERIMENTAL_OCI: 1
  HELM_VERSION_TO_INSTALL: 3.5.0  
  ACR_SP: http://foodforlifeacr-push-service-principal
  HELM_CHART: producer-api-helm
  HELM_CHART_PATH: deployments/producer-api-helm
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Maven Build
        run: mvn clean install

      - name: 'Docker login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_SERVER_NAME}}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # step 3: Build Docker Image
      - name: Build Docker
        run: docker build . -t ${{ env.ACR_SERVER_NAME }}/${{ env.APP_NAME }}:${{ env.TAG }}

      # step 4: Push Docker to Azure Registry
      - name: Push Docker
        run: docker push ${{ env.ACR_SERVER_NAME }}/${{ env.APP_NAME }}:${{ env.TAG }}

      # step 5: install helm
      - name: install helm
        uses: Azure/setup-helm@v1

      # step 6 : login helm registry    
      - name: login to acr using helm
        run: |
          echo ${{ secrets.ACR_HELM_PASSWORD }} | helm registry login ${{ env.ACR_SERVER_NAME }} --username ${{ secrets.ACR_HELM_USERNAME }} --password-stdin

      # step 7 : Save & Push Helm chart to ACR    
      - name: save helm chart to local registry
        run: |
          helm chart save ${{ env.HELM_CHART_PATH }} ${{ env.ACR_SERVER_NAME }}/${{ env.HELM_CHART }}:latest
            
      - name: publish chart to acr
        run: |
          helm chart push ${{ env.ACR_SERVER_NAME }}/${{ env.HELM_CHART }}:latest


     # Set the target Azure Kubernetes Service (AKS) cluster. 
      - name: "Set AKS context and login"
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      
      # Create namespace if doesn't exist
      - name: "Create namespace"
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
      # Create image pull secret for ACR
      - name: "Pull image secret"
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.ACR_SERVER_NAME }}
          container-registry-username: ${{ secrets.ACR_USERNAME }}
          container-registry-password: ${{ secrets.ACR_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true
      
      # Deploy app to AKS
      - name: "Deploy to AKS"
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            deployments/manifests/deployment.yml
            deployments/manifests/service.yml
          images: |
            ${{ env.ACR_SERVER_NAME }}/${{ env.APP_NAME }}:${{ env.TAG }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          imagePullPolicy: Always 
